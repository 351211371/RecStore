# Copyright (c) 2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG IMAGE_VERSION=23.06-tf2-py3
FROM nvcr.io/nvidia/tensorflow:${IMAGE_VERSION} AS devel

ARG username=xieminhui
ARG uid=1000

ARG UBUNTU_VERSION

ARG RELEASE=false
ARG SM="60;61;70;75;80"
ARG VAL_MODE=OFF
ARG ENABLE_MULTINODES=ON

RUN apt-get remove --auto-remove -y python3 cmake && \
    rm -rfv /usr/local/mpi /usr/local/ucx

ENV http_proxy=http://127.0.0.1:7890
ENV https_proxy=http://127.0.0.1:7890

# ENV http_proxy=http://10.0.2.180:7890
# ENV https_proxy=http://10.0.2.180:7890

# ENV http_proxy=http://192.168.1.30:7890
# ENV https_proxy=http://192.168.1.30:7890

ENV no_proxy=localhost,127.0.0.1,kwaidc.com
ENV CC=/usr/bin/gcc
ENV CXX=/usr/bin/g++


COPY ubuntu20.04.apt.ustc /etc/apt/sources.list





RUN apt-get update -y && \
      DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      vim gdb git wget tar unzip curl clang-format libboost-all-dev && \
      rm -rf /var/lib/apt/lists/*


COPY Miniforge3-Linux-x86_64.sh /var/tmp/

RUN mkdir -p /var/tmp && cd /var/tmp && bash Miniforge3-$(uname)-$(uname -m).sh -b -p /opt/conda && \
/opt/conda/bin/conda init && \
ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
/opt/conda/bin/conda clean -afy && \
rm -rf /var/tmp/Miniconda3-py38_4.10.3-Linux-x86_64.sh

# RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py38_4.10.3-Linux-x86_64.sh && \
# bash /var/tmp/Miniconda3-py38_4.10.3-Linux-x86_64.sh -b -p /opt/conda && \
# /opt/conda/bin/conda init && \
# ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
# /opt/conda/bin/conda clean -afy && \
# rm -rf /var/tmp/Miniconda3-py38_4.10.3-Linux-x86_64.sh

ENV CPATH=/opt/conda/include:$CPATH \
LD_LIBRARY_PATH=/opt/conda/lib:$LD_LIBRARY_PATH \
LIBRARY_PATH=/opt/conda/lib:$LIBRARY_PATH \
PATH=/opt/conda/bin:$PATH \
CONDA_PREFIX=/opt/conda \
NCCL_LAUNCH_MODE=PARALLEL

# remove cudf since it introduces an elder version of PB
RUN conda update -n base -c defaults conda
RUN conda install -y nvidia/label/cuda-12.3.2::cuda-toolkit
RUN conda install -c rapidsai -c nvidia -c numba -c conda-forge python=3.8 && \
conda install -c conda-forge pip ucx libhwloc=2.4.0 openmpi=4.1.0 openmpi-mpicc=4.1.0 mpi4py=3.0.3 && \
conda install -c rapidsai -c nvidia -c numba -c conda-forge cudf=0.19 && \
conda clean -afy && \
rm -rfv /opt/conda/include/nccl.h /opt/conda/lib/libnccl* /opt/conda/include/google /opt/conda/include/*cudnn* /opt/conda/lib/*cudnn* /opt/conda/lib/libcudart*


RUN pip install "cmake<3.25.0"

# RUN conda update -n base -c defaults conda && \
# conda install -c rapidsai -c nvidia -c numba -c conda-forge cudf=0.19 python=3.8 cudatoolkit=11.2 && \
# conda install -c conda-forge cmake=3.19.6 pip ucx libhwloc=2.4.0 openmpi=4.1.0 openmpi-mpicc=4.1.0 mpi4py=3.0.3 && \
# conda clean -afy && \
# rm -rfv /opt/conda/include/nccl.h /opt/conda/lib/libnccl* /opt/conda/include/google /opt/conda/include/*cudnn* /opt/conda/lib/*cudnn* /opt/conda/lib/libcudart*
ENV OMPI_MCA_plm_rsh_agent=sh \
OMPI_MCA_opal_cuda_support=true \
OMPI_MCA_pml="ucx" \
OMPI_MCA_osc="ucx" \
UCX_MEMTYPE_CACHE=n

RUN pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy pandas scikit-learn ortools jupyter torch tqdm tensorflow && \
pip3 cache purge

RUN ln -s /usr/lib/x86_64-linux-gnu/libibverbs.so.1.11.32.1 /usr/lib/x86_64-linux-gnu/libibverbs.so

# HugeCTR
# RUN if [ "$RELEASE" = "true" ]; \
# then \
# mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 --branch master https://github.com/NVIDIA/HugeCTR.git HugeCTR && cd - && \
# cd /var/tmp/HugeCTR && \
# git submodule update --init --recursive && \
# mkdir build && cd build && \
# cmake -DCMAKE_BUILD_TYPE=Release -DSM=$SM \
# -DVAL_MODE=$VAL_MODE -DENABLE_MULTINODES=$ENABLE_MULTINODES .. && \
# make -j$(nproc) && make install && \
# chmod +x /usr/local/hugectr/bin/* && \
# chmod +x /usr/local/hugectr/lib/* && \
# rm -rf /var/tmp/HugeCTR; \
# else \
# echo "Build container for development successfully"; \
# fi
# ENV PATH=/usr/local/hugectr/bin:$PATH \
# LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH \
# LD_LIBRARY_PATH=/usr/local/hugectr/lib:$LD_LIBRARY_PATH \
# PYTHONPATH=/usr/local/hugectr/lib:$PYTHONPATH


RUN cd /opt/conda/lib && ln -sf /lib/x86_64-linux-gnu/libffi.so.7.1.0 libffi.so.7

RUN apt-get update -y && \
  apt-get install -y --no-install-recommends \
  libboost-all-dev \
  libevent-dev \
  libdouble-conversion-dev \
  libgoogle-glog-dev \
  libgflags-dev \
  libiberty-dev \
  liblz4-dev \
  liblzma-dev \
  libsnappy-dev \
  zlib1g-dev \
  binutils-dev \
  libjemalloc-dev \
  libssl-dev \
  pkg-config \
  libunwind-dev \
  libunwind8-dev \
  libelf-dev \
  libdwarf-dev \
  cloc \
  check \
  sudo \
  libtbb-dev \
  libmemcached-dev 

RUN apt remove -y libgoogle-glog-dev


RUN apt-get update -y && \
  apt-get install -y zsh fzf google-perftools openssh-server software-properties-common


# RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin \
#     && mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 \
#     && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub \
#     && add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"

RUN rm -f /etc/apt/sources.list.d/cuda.list
RUN rm -f /etc/apt/sources.list.d/nvidia-ml.list
RUN apt-key del 7fa2af80
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub


# RUN apt-get update \
#     && apt-get install -y datacenter-gpu-manager

RUN echo "${username} ALL=(ALL) NOPASSWD:ALL" >>/etc/sudoers

RUN echo "root:1234" | chpasswd

RUN useradd --uid=${uid} ${username}

RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo 'Asia/Shanghai' >/etc/timezone

#RUN apt-get install -y nsight-compute-2021.2.0
#

RUN sed -i 's/#Port 22/Port 22222/g' /etc/ssh/sshd_config

RUN mkdir /home/${username}
RUN chown -R ${uid}:${uid} /home/${username}

RUN service ssh restart
RUN apt-get install -y kmod

USER ${uid}:${uid}
WORKDIR /home/${username}

RUN mkdir .ssh
RUN echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCiMP0T//ukA8H5xY+l6yxvC/gc77RoREKX5LKhoYjosswCM9pGDHLH0f2DkS2y4sTX219VBz0bX3xiFcczOca0jH1ABEm0oB46y1zmUxyDDNPoCtaACo0toQaSSjeORIvQWYdwpKwZAAJqrGAAxvNDSoT8RsSXhSMu5ETxitJHknCP1kuApM/KGt48Qeu6UCrETb7q7bRZYxo0Vcs6bDs331eRzo4PDRP2/3YUefE/Ae/pSU2G/8GaFgHq8Vj15TKGqZn5Zesykk1mlYL7CLczGhyEQqf1/HytfaHMQdsMgnrdUvlVjeiTI4h5G/y4wfDTLFi50zjJogFrA8FDEPsyTq56tO6q2zX3vck1V/1aPgrAJ6JRX0mgQUrRC2uBFw4f0n/RzVhOO1aztiq6bHiUXMRXMwRQZ/XQ26AoOEh+cabI46pPKqsa+9WLwFH+7A4eLzNx6Hox0K2oikQpyVUJSUpeQDm81fVcRd2oFwKJGUK2U45ZGoSBdiHFUim4DeE= xieminhui@xieminhuideMac-mini.local' >>.ssh/authorized_keys
RUN chmod 600 .ssh/authorized_keys

RUN alias sudo='sudo PATH="$PATH" HOME="$HOME" LD_LIBRARY_PATH="$LD_LIBRARY_PATH"'
# ENV PYTHONPATH=/data/project/HugeCTR/build/lib

RUN sudo rm /opt/conda/lib/libtinfo*
RUN sudo rm -rf /opt/conda/include/grpc*

RUN sudo chown -R ${uid}:${uid} /opt/conda/
RUN sudo -E /opt/conda/bin/conda install -y -c conda-forge ncurses